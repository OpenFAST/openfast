##################	Registry	for	MAP++	###############
#	column	1	<keyword>
#	column	2	ModuleName/ModName or ^ to use the value from the previous line (SD is nickname for ModuleName)
#	column	3	Derived data type (without "ModName_" prefix)
#	column	4	Derived data types's Field type
#	column	5	Variable name
#	column	6	Dimension of variable {:} for allocatable
#	column	7	Variable's initial value (if set in the data type)
#	column	8	I think this is a switch for mixed-language programming; it's mostly unused
#	column	9	Description
#	column	10	Units
# Keyword	ModuleName/ModName	Derived data type	Field type	Variable name	   variable dimension	Initial value	for mix language, not used	Description	Units

include Registry_NWTC_Library.txt

														
## ============================== Define input types here: ============================================================================================================================================				
typedef         MAP    InitInputType        DbKi             gravity            -        -999.9               -            "gravity constant"   "[m/s^2]"	
typedef         ^       ^                   DbKi             sea_density        -        -999.9               -            "sea density"        "[kg/m^3]"
typedef	        ^       ^                   DbKi             depth              -        -999.9               -            "depth of water"     "[m]"	
typedef	        ^       ^                   CHARACTER(255)   file_name          -         ""                  -            "MAP input file"
typedef	        ^       ^                   CHARACTER(255)   summary_file_name  -         ""                  -            "MAP summary file name"
typedef         ^       ^                   CHARACTER(255)   library_input_str  -         ""                  -            "cable library string information (from input file)"	
typedef         ^       ^                   CHARACTER(255)   node_input_str     -         ""                  -            "node string information (from input file)"	
typedef         ^       ^                   CHARACTER(255)   line_input_str     -         ""                  -            "element library string information (from input file)"	
typedef	        ^       ^                   CHARACTER(255)   option_input_str   -         ""                  -            "solver options library string information (from input file)"	


## ============================== Define Initialization outputs here: ================================================================================================================================
typedef         ^       InitOutputType      CHARACTER(99)    progName           -         ""                  -            "program name"
typedef	        ^       ^                   CHARACTER(99)    version            -         ""                  -            "version numnber"
typedef         ^       ^                   CHARACTER(24)    compilingData      -         ""                  -            "compiling data"
typedef         ^       ^                   CHARACTER(10)    writeOutputHdr    {:}        ""                  -            "first line output file contents: output variable names"
typedef         ^       ^                   CHARACTER(10)    writeOutputUnt    {:}        ""                  -            "second line of output file contents: units"
typedef         ^       ^                   ProgDesc         Ver                -         ""                  -            "his module's name, version, and date"


## ============================== Define Continuous states here: =====================================================================================================================================
typedef         ^       ContinuousStateType DbKI             dummy              -         -                   -            "Remove this variable if you have continuous states" -


## ============================== Define Discrete states here: =====================================================================================================================================
typedef         ^       DiscreteStateType   DbKi             dummy              -         -                   -            "Remove this variable if you have discrete states" -


## ============================== Define Other states here: =====================================================================================================================================
typedef	       ^        OtherStateType      DbKi             H                 {:}        -                   -            "horizontal line force"   "[N]"	
typedef	       ^        ^                   DbKi             V                 {:}        -                   -            "Vertical line force"     "[N]"
typedef	       ^        ^                   DbKi             Ha                {:}        -                   -            "horizontal line force at anchor"   "[N]"	
typedef	       ^        ^                   DbKi             Va                {:}        -                   -            "Vertical line force at anchor"     "[N]"
typedef	       ^        ^                   DbKi             x                 {:}        -                   -            "x fairlead line position" "[m]"
typedef	       ^        ^                   DbKi             y                 {:}        -                   -            "y fairlead line position" "[m]"
typedef	       ^        ^                   DbKi             z                 {:}        -                   -            "z fairlead line position" "[m]"
typedef	       ^        ^                   DbKi             xa                {:}        -                   -            "x fairlead line position at anchor" "[m]"
typedef	       ^        ^                   DbKi             ya                {:}        -                   -            "y fairlead line position at anchor" "[m]"
typedef	       ^        ^                   DbKi             za                {:}        -                   -            "z fairlead line position at anchor" "[m]"
typedef	       ^        ^                   DbKi             Fx_connect        {:}        -                   -            "horizontal x line force at connect node"  "[N]"	
typedef	       ^        ^                   DbKi             Fy_connect        {:}        -                   -            "horizontal y line force at connect node"  "[N]"
typedef	       ^        ^                   DbKi             Fz_connect        {:}        -                   -            "vertical z line force at connect node"    "[N]"	
typedef	       ^        ^                   DbKi             Fx_anchor         {:}        -                   -            "horizontal x line force at connect node"  "[N]"	
typedef	       ^        ^                   DbKi             Fy_anchor         {:}        -                   -            "horizontal y line force at connect node"  "[N]"
typedef	       ^        ^                   DbKi             Fz_anchor         {:}        -                   -            "vertical z line force at connect node"    "[N]"	


## ============================== Define constraint states here: =====================================================================================================================================
typedef	       ^        ConstraintStateType DbKi             H                 {:}        -                   -            "horizontal line force"   "[N]"	
typedef	       ^        ^                   DbKi             V                 {:}        -                   -            "Vertical line force"     "[N]"
typedef	       ^        ^                   DbKi             x                 {:}        -                   -            "fairlead x displacement"  "[m]"					
typedef	       ^        ^                   DbKi             y                 {:}        -                   -            "fairlead y displacement"  "[m]"					
typedef	       ^        ^                   DbKi             z                 {:}        -                   -            "fairlead z displacement"  "[m]"					


## ============================== Parameters ============================================================================================================================================
typedef         ^        ParameterType       DbKi             g                  -         -                   -            "gravitational constant"                          "[kg/m^2]"
typedef         ^        ^                   DbKi             depth              -         -                   -            "distance to seabed"                              "[m]"
typedef         ^        ^                   DbKi             rho_sea            -         -                   -            "density of seawater"                             "[m]"
typedef         ^        ^                   DbKi             dt                 -         -                   -            "time step coupling interval"                     "[sec]"
#typedef         ^       ^                   DbKi             Lu                 -         -                   -            "unstretched cable length"                        "[m]"
#typedef         ^       ^                   DbKi             EA                 -         -                   -            "Axial stiffness"                                 "[N]"
#typedef         ^       ^                   DbKi             diam               -         -                   -            "cable diameter"                                  "[m]"
#typedef         ^       ^                   DbKi             cb                 -         -                   -            "cable/seabed friction coefficient"
#typedef         ^       ^                   DbKi             mu                 -         -                   -            "cable mass denity"                               "[kg/m]"
typedef          ^       ^                   CHARACTER(255)   InputLines         {500}     -                   -            "input file line for restart"
typedef          ^       ^                   CHARACTER(1)     InputLineType      {500}     -                   -            "input file line type for restart"

# ============================== Inputs ============================================================================================================================================	
typedef	        ^       InputType           DbKi             x                 {:}        -                   -            "fairlead x displacement"  "[m]"					
typedef	        ^       ^                   DbKi             y                 {:}        -                   -            "fairlead y displacement"  "[m]"					
typedef	        ^       ^                   DbKi             z                 {:}        -                   -            "fairlead z displacement"  "[m]"					
typedef	        ^       ^                   MeshType         PtFairDisplacement -         -                   -            "position of each fairlead in X,Y,Z"  "[m]"		


## ============================== Outputs ============================================================================================================================================
typedef	       ^        OutputType          DbKi             Fx                 {:}        -                   -            "horizontal line force"   "[N]"	
typedef	       ^        ^                   DbKi             Fy                 {:}        -                   -            "Vertical line force"     "[N]"
typedef	       ^        ^                   DbKi             Fz                 {:}        -                   -            "horizontal line force at anchor"   "[N]"	
typedef	       ^        ^                   ReKi             WriteOutput        {:}        -                   -            "outpur vector" ""
typedef	       ^        ^                   DbKi             wrtOutput          {:}        -                   -            "outpur vector" ""
typedef	       ^        ^                   MeshType         ptFairleadLoad      -         -                   -            "point mesh for forces in X,Y,Z"         "[N]"


#####################################################################################################################################
## These are not necessary to define in the Registry, but are here to generate blank types until we do actually implement the
## Jacobians in the FAST framework. In the final implementation, they will probably not contain subtypes, but instead be
## square matrices of type ReKi or DbKi.
e#####################################################################################################################################
## ..... Jacobians .................................................................................................................
## Define the Jacobian of the output equations (Y) with respect to the inputs (u), dY/du (or Partial Y / Partial u):
#typedef   ^               SD_PartialOutputPInputType            SD_InputType            DummyOutput        -     -     -  "If you have output equations and input data, update this variable" -
#
## Define the Jacobian of the output equations (Y) with respect to the inputs (u), dY/du (or Partial Y / Partial u):
#typedef   ^               SD_PartialContStatePInputType         SD_InputType            DummyContState     -     -     -  "If you have continuous state equations and input data, update this variable" -
#
##Define the Jacobian of the discrete state equations (Xd) with respect to the inputs (u), dXd/du (or Partial Xd / Partial u):
#typedef   ^               SD_PartialDiscStatePInputType         SD_InputType            DummyDiscState     -     -     -  "If you have discrete state equations and input data, update this variable" -
#
## Define the Jacobian of the constraint state equations (Z) with respect to the inputs (u), dZ/du (or Partial Z / Partial u):
#typedef   ^               SD_PartialConstrStatePInputType       SD_InputType            DummyConstrState   -     -     -  "If you have constraint state equations and input data, update this variable" -
#
## Define the Jacobian of the output equations (Y) with respect to the continuous states (x), dY/dx (or Partial Y / Partial x):
#typedef   ^               SD_PartialOutputPContStateType        SD_ContinuousStateType  DummyOutput        -     -     -  "If you have output equations and continuous states, update this variable" -
#
## Define the Jacobian of the continuous state equations (X) with respect to the continuous states (x), dX/dx (or Partial X / Partial x):
#typedef   ^               SD_PartialContStatePContStateType     SD_ContinuousStateType  DummyContState     -     -     -  "If you have continuous state equations and continuous states, update this variable" -
#
## Define the Jacobian of the discrete state equations (Xd) with respect to the continuous states (x), dXd/dx (or Partial Xd / Partial x):
#typedef   ^               SD_PartialDiscStatePContStateType     SD_ContinuousStateType  DummyDiscState     -     -     -  "If you have discrete state equations and continuous states, update this variable" -
#
## Define the Jacobian of the constraint state equations (Z) with respect to the continuous states (x), dZ/dx (or Partial Z / Partial x):
#typedef   ^               SD_PartialConstrStatePContStateType   SD_ContinuousStateType  DummyConstrState   -     -     -  "If you have constraint state equations and continuous states, update this variable" -
#
## Define the Jacobian of the output equations (Y) with respect to the discrete states (xd), dY/dxd (or Partial Y / Partial xd):
#typedef   ^               SD_PartialOutputPDiscStateType        SD_DiscreteStateType    DummyOutput        -     -     -  "If you have output equations and discrete states, update this variable" -
#
## Define the Jacobian of the continuous state equations (X) with respect to the discrete states (xd), dX/dxd (or Partial X / Partial xd):
#typedef   ^               SD_PartialContStatePDiscStateType     SD_DiscreteStateType    DummyContState     -     -     -  "If you have continuous state equations and discrete states, update this variable" -
#
## Define the Jacobian of the discrete state equations (Xd) with respect to the discrete states (xd), dXd/dxd (or Partial Xd / Partial xd):
#typedef   ^               SD_PartialDiscStatePDiscStateType     SD_DiscreteStateType    DummyDiscState     -     -     -  "If you have discrete state equations and discrete states, update this variable" -
#
## Define the Jacobian of the constraint state equations (Z) with respect to the discrete states (xd), dZ/dxd (or Partial Z / Partial xd):
#typedef   ^               SD_PartialConstrStatePDiscStateType   SD_DiscreteStateType    DummyConstrState   -     -     -  "If you have constraint state equations and discrete states, update this variable" -
#
## Define the Jacobian of the output equations (Y) with respect to the constraint states (z), dY/dz (or Partial Y / Partial z):
#typedef   ^               SD_PartialOutputPConstrStateType      SD_ConstraintStateType  DummyOutput        -     -     -  "If you have output equations and constraint states, update this variable" -
#
## Define the Jacobian of the continuous state equations (X) with respect to the constraint states (z), dX/dz (or Partial X / Partial z):
#typedef   ^               SD_PartialContStatePConstrStateType   SD_ConstraintStateType  DummyContState     -     -     -  "If you have continuous state equations and constraint states, update this variable" -
#
## Define the Jacobian of the discrete state equations (Xd) with respect to the constraint states (z), dXd/dz (or Partial Xd / Partial z):
#typedef   ^               SD_PartialDiscStatePConstrStateType   SD_ConstraintStateType  DummyDiscState     -     -     -  "If you have discrete state equations and constraint states, update this variable" -
#
## Define the Jacobian of the constraint state equations (Z) with respect to the constraint states (z), dZ/dz (or Partial Z / Partial z):
#typedef   ^               SD_PartialConstrStatePConstrStateType SD_ConstraintStateType  DummyConstrState   -     -     -  "If you have constraint state equations and constraint states, update this variable" -

