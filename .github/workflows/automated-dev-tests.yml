  
name: 'Development Pipeline'

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'share/**'
      - 'vs-build/**'

  pull_request:
    types: [opened, synchronize] #labeled, assigned]
    paths-ignore:
      - 'docs/**'
      - 'share/**'
      - 'vs-build/**'

env:
  FORTRAN_COMPILER: gfortran-10
  NUM_PROCS: 8

# runs-on: ${{ matrix.os }}
# strategy:
#   matrix:
#     os: [macOS-10.14, ubuntu-18.04]

jobs:
  regression-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy Bokeh==1.4

      - name: Setup Workspace
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure Build
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake \
            -DCMAKE_INSTALL_PREFIX:PATH=${{runner.workspace}}/install \
            -DCMAKE_Fortran_COMPILER:STRING=${{env.FORTRAN_COMPILER}} \
            -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBUILD_TESTING:BOOL=ON \
            -DCTEST_PLOT_ERRORS:BOOL=ON \
            ${GITHUB_WORKSPACE}
      - name: Build OpenFAST
        # if: contains(github.event.head_commit.message, 'Action - Test All') || contains(github.event.pull_request.labels.*.name, 'Action - Test All') 
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --target install -- -j ${{env.NUM_PROCS}}

      - name: Run BeamDyn tests
        uses: ./.github/actions/tests-module-beamdyn
        with:
          test-target: regression
      - name: Run HydroDyn tests
        uses: ./.github/actions/tests-module-hydrodyn
      - name: Run OpenFAST tests
        # if: contains(github.event.head_commit.message, 'Action - Test All') || contains(github.event.pull_request.labels.*.name, 'Action - Test All') 
        uses: ./.github/actions/tests-gluecode-openfast

      - name: Failing test artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: test-results
          path: |
            ${{runner.workspace}}/build/reg_tests/modules
            ${{runner.workspace}}/build/reg_tests/glue-codes/openfast
            !${{runner.workspace}}/build/reg_tests/glue-codes/openfast/5MW_Baseline
            !${{runner.workspace}}/build/reg_tests/glue-codes/openfast/AOC
            !${{runner.workspace}}/build/reg_tests/glue-codes/openfast/AWT27
            !${{runner.workspace}}/build/reg_tests/glue-codes/openfast/SWRT
            !${{runner.workspace}}/build/reg_tests/glue-codes/openfast/UAE_VI
            !${{runner.workspace}}/build/reg_tests/glue-codes/openfast/WP_Baseline

  unit-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          submodules: recursive
      - name: Setup
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake \
            -DCMAKE_INSTALL_PREFIX:PATH=${{runner.workspace}}/install \
            -DCMAKE_Fortran_COMPILER:STRING=${{env.FORTRAN_COMPILER}} \
            -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBUILD_TESTING:BOOL=ON \
            ${GITHUB_WORKSPACE}

      - name: Build unit tests
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --target unit_tests -- -j ${{env.NUM_PROCS}}

      - name: Run NWTC Library tests
        uses: ./.github/actions/tests-module-nwtclibrary
      - name: Run AeroDyn tests
        uses: ./.github/actions/tests-module-aerodyn
      - name: Run BeamDyn tests
        uses: ./.github/actions/tests-module-beamdyn
        with:
          test-target: unit
      - name: Run InflowWind tests
        uses: ./.github/actions/tests-module-inflowwind

  compile-all-single-precision:
    # Test if single precision compile completes.
    # Compiles all targets excluding tests.
    # Do not run the test suite.

    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          submodules: recursive
      - name: Setup
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake \
            -DCMAKE_INSTALL_PREFIX:PATH=${{runner.workspace}}/install \
            -DCMAKE_Fortran_COMPILER:STRING=${{env.FORTRAN_COMPILER}} \
            -DCMAKE_BUILD_TYPE:STRING=Debug \
            -DDOUBLE_PRECISION:BOOL=OFF \
            ${GITHUB_WORKSPACE}
      - name: Build all
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --target all -- -j ${{env.NUM_PROCS}}
      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: ./glue-codes/openfast/openfast -v
