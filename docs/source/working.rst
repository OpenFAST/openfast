.. _working_with_OF:

Working with OpenFAST
=====================

This section provides support for some of the typical use cases of OpenFAST. 
Link to sripts and softwares that can help the analyses are given.





Reading and visualizing inputs and outputs files
------------------------------------------------

Section not finished.


Visualization tools:

- `paraview <https://www.paraview.org/>`_ : tool to open the VTK files generated by OpenFAST, i.e. velocity fields and turbine geometry.

- `pyDatView <https://github.com/ebranlard/pyDatView>`_ : tool to plot the input and output files of OpenFAST. The tool relies on the library weio mentioned below that also reads standard formats (CSV, Excel) and files from other wind energy software (Hawc2, Flex).



Input/output libraries:

- `weio <https://github.com/ebranlard/weio>`_: python library which can read and write OpenFAST files and other file formats. Input files are read as dictionaries. The output files can easily be manipulated as pandas dataframe or numpy arrays.

- `matlab-toolbox <https://github.com/OpenFAST/matlab-toolbox>`_: this collection of matlab tools for OpenFAST provides reader and writer of matlab files, e.g. `FAST2Matlab.m` and `Matlab2FAST.m`
  
- `WISDEM <https://github.com/WISDEM>`_ :

- `WindEnergyToolbox <https://gitlab.windenergy.dtu.dk/toolbox/WindEnergyToolbox>`_: library developed by DTU, providing some support for different file formats

- `FASTTool <https://github.com/TUDelft-DataDrivenControl/FASTTool>`_ : NREL FASTv8, MATLAB GUI and Simulink integration developed by TUDelft





Performing a linearization analysis
----------------------------------

This section describes the key steps to run linearization with OpenFAST. 
Current developments are being made to automatize the process (e.g. linearizing about a given RPM set point, detecting mode shapes, performing a Cambell diagram).

The implementation of the linearization tools is in Matlab (Octave can be used), and the source code is to be found is mainly located in the folder `MBC` or the `matlab-toolbox <https://github.com/OpenFAST/matlab-toolbox>`_. These tools need to be downloaded and need to be added to the matlab path.



The steps for a simple linearization analysis are given below:

- Edit the main `.fst` file, the `Linerize` to `True`, and define the list of times whre the linearization should be done. For a typical use case the linearization is done at only one time (e.g. the end time of the simulation), time at which the turbine has reach a periodic steady state. The only way to know whether this is the case is to look at the output file and verify that the rotor speed has reached the desired value where the linearization is intended to be run for (Automatic set-point is currently being implemented and tested). For a typical linearization, you can keep `LinINputs=1`, `LinOutputs=1`, `LinOutJac=False`, `LinOutMod=False`.

- Run OpenFAST on this `.fst` file. OpenFAST will report errors if some options are activated that are not supported with linearization (see section below). Adapt your input files accordingly. One the simulation run, OpenFAST will display an error when performing the linearization and output a `.lin` file. 
  
- Check the regular output file `.out` or `.outb` to see whether the turbine had indeed reached a steady state (or periodic steady state) at the time where linearization was run. If so, you can proceed with the postprocessing. Otherwise, adjust your linearization time, your simulation time and your initial conditions and re-run the simulation.

- Adjust the parameters of the matlab script given below. This provides an idea of the content of each mode, but the users has to do the interpretation of which mode is which. (Code to automatize this identification is currently being developed)

.. code-block:: matalb

    %% Documentation:
    % Script scripts opens an OpenFAST `.lin` file and postprocesses it using the function from the MPC folder of the matalb-toolbox
    % It then loops on the frequencies and reports their values, the damping ratio and the degrees of freedom that have the most energy content.

    %% Initialization
    clear all; close all; clc; restoredefaultpath;
    addpath(genpath('XXXXX/matlab-toolbox/'))

    %% Parameters
    FileNames = {'YYYY/SimlutionName.1.lin'};
    BladeLen =  40.04 ; % Blade Length [m]
    TowerLen = 63; % LowerLength [m]

    %% Postprocessing linearization file
    [mbc_data, matData, FAST_linData] = fx_mbc3( FileNames );
    [CampbellData] = campbell_diagram_data(mbc_data, BladeLen, TowerLen);
    CD=CampbellData;
    fprintf('Frequencies ; Damping ratio ; Content\n')
    for i = 1:length(CD.NaturalFreq_Hz)
        Desc=CD.Modes{i}.DescStates(CD.Modes{i}.StateHasMaxAtThisMode);
        if length(Desc)==0
            DescCat = CD.Modes{i}.DescStates{1};
        else
            DescCat = sprintf('%s  -  ',Desc{:});
        end
        fprintf('%9.3f   ;   %9.4f   ;  %s\n',CD.NaturalFreq_Hz(i),CD.DampingRatio(i),DescCat);
    end



Options not yet supported with the linearization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Section not finished.

Not all modules support linearization, or not all options of OpenFAST can be used in conjunction with the linearization. OpenFAST will report an error in such case.
Typical options that are not supported:

- `BeamDyn`: cannot be used for now, use ElastoDyn
- `ExtPtfm`: cannot be used for now
- `SubDyn`: cannot be used for now
- `AFAeroMod`: needs to be set to 1
- More TODO




Running design load cases (DLC)
-------------------------------

Section not finished.

- `WISDEM <https://github.com/WISDEM>`_ 




Running parametric studies
--------------------------

Section not finished.

- `fastlib <https://github.com/ebranlard/welib/tree/master/welib/fastlib>`:  python script that provdes support for running several OpenFAST simulations: generating the input files, running OpenFAST in parallel, and provide some post processing scripts. The list of load cases may be defined within python or via an Excel spread sheet.


- `WISDEM <https://github.com/WISDEM>`_ :  
